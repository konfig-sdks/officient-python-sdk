# coding: utf-8

"""
    Officient API

    Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from officient_python_sdk import schemas  # noqa: F401


class PersonGetEventTypeLimitsResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            name = schemas.StrSchema
            limitation = schemas.StrSchema
            max_yearly_amount_days = schemas.IntSchema
            max_yearly_amount_minutes = schemas.IntSchema
            approval_needed = schemas.IntSchema
            allowed_selfservice = schemas.IntSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "limitation": limitation,
                "max_yearly_amount_days": max_yearly_amount_days,
                "max_yearly_amount_minutes": max_yearly_amount_minutes,
                "approval_needed": approval_needed,
                "allowed_selfservice": allowed_selfservice,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limitation"]) -> MetaOapg.properties.limitation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_yearly_amount_days"]) -> MetaOapg.properties.max_yearly_amount_days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_yearly_amount_minutes"]) -> MetaOapg.properties.max_yearly_amount_minutes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approval_needed"]) -> MetaOapg.properties.approval_needed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowed_selfservice"]) -> MetaOapg.properties.allowed_selfservice: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "limitation", "max_yearly_amount_days", "max_yearly_amount_minutes", "approval_needed", "allowed_selfservice", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limitation"]) -> typing.Union[MetaOapg.properties.limitation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_yearly_amount_days"]) -> typing.Union[MetaOapg.properties.max_yearly_amount_days, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_yearly_amount_minutes"]) -> typing.Union[MetaOapg.properties.max_yearly_amount_minutes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approval_needed"]) -> typing.Union[MetaOapg.properties.approval_needed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowed_selfservice"]) -> typing.Union[MetaOapg.properties.allowed_selfservice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "limitation", "max_yearly_amount_days", "max_yearly_amount_minutes", "approval_needed", "allowed_selfservice", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        limitation: typing.Union[MetaOapg.properties.limitation, str, schemas.Unset] = schemas.unset,
        max_yearly_amount_days: typing.Union[MetaOapg.properties.max_yearly_amount_days, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_yearly_amount_minutes: typing.Union[MetaOapg.properties.max_yearly_amount_minutes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        approval_needed: typing.Union[MetaOapg.properties.approval_needed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        allowed_selfservice: typing.Union[MetaOapg.properties.allowed_selfservice, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PersonGetEventTypeLimitsResponseDataItem':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            limitation=limitation,
            max_yearly_amount_days=max_yearly_amount_days,
            max_yearly_amount_minutes=max_yearly_amount_minutes,
            approval_needed=approval_needed,
            allowed_selfservice=allowed_selfservice,
            _configuration=_configuration,
            **kwargs,
        )
