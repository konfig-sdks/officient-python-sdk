# coding: utf-8

"""
    Officient API

    Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from officient_python_sdk import schemas  # noqa: F401


class PersonGetWageHistoryResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            start_date = schemas.StrSchema
            end_date = schemas.StrSchema
            estimated_monthly_total = schemas.IntSchema
            currency = schemas.StrSchema
            type = schemas.StrSchema
            rate = schemas.IntSchema
            created_at = schemas.IntSchema
            updated_at = schemas.IntSchema
            registration_country_code = schemas.StrSchema
        
            @staticmethod
            def estimated_monthly_cost() -> typing.Type['PersonGetWageHistoryResponseDataItemEstimatedMonthlyCost']:
                return PersonGetWageHistoryResponseDataItemEstimatedMonthlyCost
        
            @staticmethod
            def weekly_time_engagement_minutes() -> typing.Type['PersonGetWageHistoryResponseDataItemWeeklyTimeEngagementMinutes']:
                return PersonGetWageHistoryResponseDataItemWeeklyTimeEngagementMinutes
        
            @staticmethod
            def custom_payroll_data() -> typing.Type['PersonGetWageHistoryResponseDataItemCustomPayrollData']:
                return PersonGetWageHistoryResponseDataItemCustomPayrollData
            termination_reason = schemas.StrSchema
            multiple_week_schedule = schemas.AnyTypeSchema
            __annotations__ = {
                "id": id,
                "start_date": start_date,
                "end_date": end_date,
                "estimated_monthly_total": estimated_monthly_total,
                "currency": currency,
                "type": type,
                "rate": rate,
                "created_at": created_at,
                "updated_at": updated_at,
                "registration_country_code": registration_country_code,
                "estimated_monthly_cost": estimated_monthly_cost,
                "weekly_time_engagement_minutes": weekly_time_engagement_minutes,
                "custom_payroll_data": custom_payroll_data,
                "termination_reason": termination_reason,
                "multiple_week_schedule": multiple_week_schedule,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estimated_monthly_total"]) -> MetaOapg.properties.estimated_monthly_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registration_country_code"]) -> MetaOapg.properties.registration_country_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estimated_monthly_cost"]) -> 'PersonGetWageHistoryResponseDataItemEstimatedMonthlyCost': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weekly_time_engagement_minutes"]) -> 'PersonGetWageHistoryResponseDataItemWeeklyTimeEngagementMinutes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_payroll_data"]) -> 'PersonGetWageHistoryResponseDataItemCustomPayrollData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termination_reason"]) -> MetaOapg.properties.termination_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multiple_week_schedule"]) -> MetaOapg.properties.multiple_week_schedule: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "start_date", "end_date", "estimated_monthly_total", "currency", "type", "rate", "created_at", "updated_at", "registration_country_code", "estimated_monthly_cost", "weekly_time_engagement_minutes", "custom_payroll_data", "termination_reason", "multiple_week_schedule", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> typing.Union[MetaOapg.properties.start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> typing.Union[MetaOapg.properties.end_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estimated_monthly_total"]) -> typing.Union[MetaOapg.properties.estimated_monthly_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registration_country_code"]) -> typing.Union[MetaOapg.properties.registration_country_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estimated_monthly_cost"]) -> typing.Union['PersonGetWageHistoryResponseDataItemEstimatedMonthlyCost', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weekly_time_engagement_minutes"]) -> typing.Union['PersonGetWageHistoryResponseDataItemWeeklyTimeEngagementMinutes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_payroll_data"]) -> typing.Union['PersonGetWageHistoryResponseDataItemCustomPayrollData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termination_reason"]) -> typing.Union[MetaOapg.properties.termination_reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multiple_week_schedule"]) -> typing.Union[MetaOapg.properties.multiple_week_schedule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "start_date", "end_date", "estimated_monthly_total", "currency", "type", "rate", "created_at", "updated_at", "registration_country_code", "estimated_monthly_cost", "weekly_time_engagement_minutes", "custom_payroll_data", "termination_reason", "multiple_week_schedule", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        start_date: typing.Union[MetaOapg.properties.start_date, str, schemas.Unset] = schemas.unset,
        end_date: typing.Union[MetaOapg.properties.end_date, str, schemas.Unset] = schemas.unset,
        estimated_monthly_total: typing.Union[MetaOapg.properties.estimated_monthly_total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        rate: typing.Union[MetaOapg.properties.rate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        registration_country_code: typing.Union[MetaOapg.properties.registration_country_code, str, schemas.Unset] = schemas.unset,
        estimated_monthly_cost: typing.Union['PersonGetWageHistoryResponseDataItemEstimatedMonthlyCost', schemas.Unset] = schemas.unset,
        weekly_time_engagement_minutes: typing.Union['PersonGetWageHistoryResponseDataItemWeeklyTimeEngagementMinutes', schemas.Unset] = schemas.unset,
        custom_payroll_data: typing.Union['PersonGetWageHistoryResponseDataItemCustomPayrollData', schemas.Unset] = schemas.unset,
        termination_reason: typing.Union[MetaOapg.properties.termination_reason, str, schemas.Unset] = schemas.unset,
        multiple_week_schedule: typing.Union[MetaOapg.properties.multiple_week_schedule, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PersonGetWageHistoryResponseDataItem':
        return super().__new__(
            cls,
            *args,
            id=id,
            start_date=start_date,
            end_date=end_date,
            estimated_monthly_total=estimated_monthly_total,
            currency=currency,
            type=type,
            rate=rate,
            created_at=created_at,
            updated_at=updated_at,
            registration_country_code=registration_country_code,
            estimated_monthly_cost=estimated_monthly_cost,
            weekly_time_engagement_minutes=weekly_time_engagement_minutes,
            custom_payroll_data=custom_payroll_data,
            termination_reason=termination_reason,
            multiple_week_schedule=multiple_week_schedule,
            _configuration=_configuration,
            **kwargs,
        )

from officient_python_sdk.model.person_get_wage_history_response_data_item_custom_payroll_data import PersonGetWageHistoryResponseDataItemCustomPayrollData
from officient_python_sdk.model.person_get_wage_history_response_data_item_estimated_monthly_cost import PersonGetWageHistoryResponseDataItemEstimatedMonthlyCost
from officient_python_sdk.model.person_get_wage_history_response_data_item_weekly_time_engagement_minutes import PersonGetWageHistoryResponseDataItemWeeklyTimeEngagementMinutes
