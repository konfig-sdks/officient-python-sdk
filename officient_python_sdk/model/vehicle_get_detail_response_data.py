# coding: utf-8

"""
    Officient API

    Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from officient_python_sdk import schemas  # noqa: F401


class VehicleGetDetailResponseData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            type = schemas.StrSchema
            brand = schemas.StrSchema
            model = schemas.StrSchema
            fuel = schemas.StrSchema
            plate = schemas.StrSchema
            hp = schemas.IntSchema
            co2_g_km = schemas.IntSchema
            chassis_number = schemas.StrSchema
            color = schemas.StrSchema
            supplier = schemas.StrSchema
            contract_type = schemas.StrSchema
            catalogue_value = schemas.StrSchema
            date_first_registration = schemas.StrSchema
            specifics = schemas.StrSchema
        
            @staticmethod
            def yearly_cost() -> typing.Type['VehicleGetDetailResponseDataYearlyCost']:
                return VehicleGetDetailResponseDataYearlyCost
            deleted = schemas.IntSchema
        
            @staticmethod
            def owner() -> typing.Type['VehicleGetDetailResponseDataOwner']:
                return VehicleGetDetailResponseDataOwner
        
            @staticmethod
            def custom_fields() -> typing.Type['VehicleGetDetailResponseDataCustomFields']:
                return VehicleGetDetailResponseDataCustomFields
            __annotations__ = {
                "id": id,
                "type": type,
                "brand": brand,
                "model": model,
                "fuel": fuel,
                "plate": plate,
                "hp": hp,
                "co2_g_km": co2_g_km,
                "chassis_number": chassis_number,
                "color": color,
                "supplier": supplier,
                "contract_type": contract_type,
                "catalogue_value": catalogue_value,
                "date_first_registration": date_first_registration,
                "specifics": specifics,
                "yearly_cost": yearly_cost,
                "deleted": deleted,
                "owner": owner,
                "custom_fields": custom_fields,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brand"]) -> MetaOapg.properties.brand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fuel"]) -> MetaOapg.properties.fuel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plate"]) -> MetaOapg.properties.plate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hp"]) -> MetaOapg.properties.hp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["co2_g_km"]) -> MetaOapg.properties.co2_g_km: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chassis_number"]) -> MetaOapg.properties.chassis_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supplier"]) -> MetaOapg.properties.supplier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_type"]) -> MetaOapg.properties.contract_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["catalogue_value"]) -> MetaOapg.properties.catalogue_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_first_registration"]) -> MetaOapg.properties.date_first_registration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["specifics"]) -> MetaOapg.properties.specifics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearly_cost"]) -> 'VehicleGetDetailResponseDataYearlyCost': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'VehicleGetDetailResponseDataOwner': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_fields"]) -> 'VehicleGetDetailResponseDataCustomFields': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "brand", "model", "fuel", "plate", "hp", "co2_g_km", "chassis_number", "color", "supplier", "contract_type", "catalogue_value", "date_first_registration", "specifics", "yearly_cost", "deleted", "owner", "custom_fields", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brand"]) -> typing.Union[MetaOapg.properties.brand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fuel"]) -> typing.Union[MetaOapg.properties.fuel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plate"]) -> typing.Union[MetaOapg.properties.plate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hp"]) -> typing.Union[MetaOapg.properties.hp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["co2_g_km"]) -> typing.Union[MetaOapg.properties.co2_g_km, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chassis_number"]) -> typing.Union[MetaOapg.properties.chassis_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> typing.Union[MetaOapg.properties.color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supplier"]) -> typing.Union[MetaOapg.properties.supplier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_type"]) -> typing.Union[MetaOapg.properties.contract_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["catalogue_value"]) -> typing.Union[MetaOapg.properties.catalogue_value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_first_registration"]) -> typing.Union[MetaOapg.properties.date_first_registration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["specifics"]) -> typing.Union[MetaOapg.properties.specifics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearly_cost"]) -> typing.Union['VehicleGetDetailResponseDataYearlyCost', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union['VehicleGetDetailResponseDataOwner', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_fields"]) -> typing.Union['VehicleGetDetailResponseDataCustomFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "brand", "model", "fuel", "plate", "hp", "co2_g_km", "chassis_number", "color", "supplier", "contract_type", "catalogue_value", "date_first_registration", "specifics", "yearly_cost", "deleted", "owner", "custom_fields", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        brand: typing.Union[MetaOapg.properties.brand, str, schemas.Unset] = schemas.unset,
        model: typing.Union[MetaOapg.properties.model, str, schemas.Unset] = schemas.unset,
        fuel: typing.Union[MetaOapg.properties.fuel, str, schemas.Unset] = schemas.unset,
        plate: typing.Union[MetaOapg.properties.plate, str, schemas.Unset] = schemas.unset,
        hp: typing.Union[MetaOapg.properties.hp, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        co2_g_km: typing.Union[MetaOapg.properties.co2_g_km, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        chassis_number: typing.Union[MetaOapg.properties.chassis_number, str, schemas.Unset] = schemas.unset,
        color: typing.Union[MetaOapg.properties.color, str, schemas.Unset] = schemas.unset,
        supplier: typing.Union[MetaOapg.properties.supplier, str, schemas.Unset] = schemas.unset,
        contract_type: typing.Union[MetaOapg.properties.contract_type, str, schemas.Unset] = schemas.unset,
        catalogue_value: typing.Union[MetaOapg.properties.catalogue_value, str, schemas.Unset] = schemas.unset,
        date_first_registration: typing.Union[MetaOapg.properties.date_first_registration, str, schemas.Unset] = schemas.unset,
        specifics: typing.Union[MetaOapg.properties.specifics, str, schemas.Unset] = schemas.unset,
        yearly_cost: typing.Union['VehicleGetDetailResponseDataYearlyCost', schemas.Unset] = schemas.unset,
        deleted: typing.Union[MetaOapg.properties.deleted, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        owner: typing.Union['VehicleGetDetailResponseDataOwner', schemas.Unset] = schemas.unset,
        custom_fields: typing.Union['VehicleGetDetailResponseDataCustomFields', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VehicleGetDetailResponseData':
        return super().__new__(
            cls,
            *args,
            id=id,
            type=type,
            brand=brand,
            model=model,
            fuel=fuel,
            plate=plate,
            hp=hp,
            co2_g_km=co2_g_km,
            chassis_number=chassis_number,
            color=color,
            supplier=supplier,
            contract_type=contract_type,
            catalogue_value=catalogue_value,
            date_first_registration=date_first_registration,
            specifics=specifics,
            yearly_cost=yearly_cost,
            deleted=deleted,
            owner=owner,
            custom_fields=custom_fields,
            _configuration=_configuration,
            **kwargs,
        )

from officient_python_sdk.model.vehicle_get_detail_response_data_custom_fields import VehicleGetDetailResponseDataCustomFields
from officient_python_sdk.model.vehicle_get_detail_response_data_owner import VehicleGetDetailResponseDataOwner
from officient_python_sdk.model.vehicle_get_detail_response_data_yearly_cost import VehicleGetDetailResponseDataYearlyCost
