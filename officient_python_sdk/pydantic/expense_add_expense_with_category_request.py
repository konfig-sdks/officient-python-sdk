# coding: utf-8

"""
    Officient API

    Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from officient_python_sdk.pydantic.expense_add_expense_with_category_request_dates import ExpenseAddExpenseWithCategoryRequestDates

class ExpenseAddExpenseWithCategoryRequest(BaseModel):
    # This is the title for the expense
    description: str = Field(alias='description')

    employee_id: int = Field(alias='employee_id')

    # For some integrations this is required not to be 0 which is the default category id
    category_id: int = Field(alias='category_id')

    # this is the price of the expense, this is only required when using a total amount category
    amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='amount')

    extra_information: typing.Optional[str] = Field(None, alias='extra_information')

    # this is the day the expense has incurred on and is required when it is a total amount category
    date: typing.Optional[str] = Field(None, alias='date')

    # this is required when you want to add an expense with a total amount category
    filename: typing.Optional[str] = Field(None, alias='filename')

    # this is required when you want to add an expense with a total amount category
    file_base64: typing.Optional[str] = Field(None, alias='file_base64')

    dates: typing.Optional[ExpenseAddExpenseWithCategoryRequestDates] = Field(None, alias='dates')

    # this is required when you want to update to a killometer allowance expense category. This is equal to the total amount of kilometers that has been done
    distance: typing.Optional[int] = Field(None, alias='distance')

    # this is the value if it's an outward or a round journey when using kilometer allowances, this defaults to single
    ride: typing.Optional[Literal["single", "double"]] = Field(None, alias='ride')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
